(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{179:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(9),i=(n(0),n(237)),o={id:"core-message-dispatch",title:"Message Dispatch and Processing"},s={id:"core-message-dispatch",isDocsHomePage:!1,title:"Message Dispatch and Processing",description:"In src/cmd/main.cpp, we assign Zilliqa::Dispatch.",source:"@site/docs/core-message-dispatch.md",permalink:"/dev-portal/docs/core-message-dispatch",editUrl:"https://github.com/Zilliqa/dev-portal/docs/core-message-dispatch.md",sidebar:"someSidebar5",previous:{title:"Messaging Limits",permalink:"/dev-portal/docs/core-messaging-limits"},next:{title:"Message Queues and Jobs",permalink:"/dev-portal/docs/core-message-queues"}},c=[],p={rightToc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"src/cmd/main.cpp"),", we assign ",Object(i.b)("inlineCode",{parentName:"p"},"Zilliqa::Dispatch")," as the dispatcher inside ",Object(i.b)("inlineCode",{parentName:"p"},"P2PComm::StartMessagePump"),". Every message that is read from a socket by ",Object(i.b)("inlineCode",{parentName:"p"},"P2PComm")," then gets sent to ",Object(i.b)("inlineCode",{parentName:"p"},"Zilliqa::Dispatch"),"."),Object(i.b)("p",null,"When Zilliqa starts to process a message, it will call ",Object(i.b)("inlineCode",{parentName:"p"},"Zilliqa::ProcessMessage"),". The first byte of any message defines the ",Object(i.b)("strong",{parentName:"p"},"message type"),"."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"Note:")," The \u201cfirst byte\u201d here refers to the payload part of a socket message. At the ",Object(i.b)("inlineCode",{parentName:"p"},"P2PComm")," level, each socket message consists of a predefined header plus the payload.")),Object(i.b)("p",null,"Depending on the type, ",Object(i.b)("inlineCode",{parentName:"p"},"Zilliqa::ProcessMessage")," will forward the message to the appropriate handler for it. The list of message types can be found in ",Object(i.b)("inlineCode",{parentName:"p"},"enum MessageType")," inside ",Object(i.b)("inlineCode",{parentName:"p"},"src/common/Messages.h"),"."),Object(i.b)("p",null,"Any class that inherits from ",Object(i.b)("inlineCode",{parentName:"p"},"Executable")," will be a message handler. For example, type ",Object(i.b)("inlineCode",{parentName:"p"},"0x01")," means ",Object(i.b)("inlineCode",{parentName:"p"},"DIRECTORY"),", and this message will be handled by ",Object(i.b)("inlineCode",{parentName:"p"},"libDirectoryService"),". If you go into ",Object(i.b)("inlineCode",{parentName:"p"},"libDirectoryService"),", you will find a function ",Object(i.b)("inlineCode",{parentName:"p"},"DirectoryService::Execute"),"."),Object(i.b)("p",null,"All classes that inherit from ",Object(i.b)("inlineCode",{parentName:"p"},"Executable")," will first check the second byte in the message, which defines the ",Object(i.b)("strong",{parentName:"p"},"instruction type"),". The list of instruction types can be found in ",Object(i.b)("inlineCode",{parentName:"p"},"src/common/Messages.h"),"."),Object(i.b)("p",null,"From there, ",Object(i.b)("inlineCode",{parentName:"p"},"Execute()")," will further forward the message to a private function inside the class, and these functions are all named ",Object(i.b)("inlineCode",{parentName:"p"},"ProcessXXX"),"."))}l.isMDXComponent=!0},237:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(n),d=r,u=b["".concat(o,".").concat(d)]||b[d]||m[d]||i;return n?a.a.createElement(u,s(s({ref:t},p),{},{components:n})):a.a.createElement(u,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);