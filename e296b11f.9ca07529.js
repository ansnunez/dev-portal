(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{223:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return m}));var r=n(2),i=n(9),a=(n(0),n(237)),o={id:"core-messaging-limits",title:"Messaging Limits"},c={id:"core-messaging-limits",isDocsHomePage:!1,title:"Messaging Limits",description:"The volume and size of peer-to-peer communication for a Zilliqa node is controlled by several factors at different parts of the stack.",source:"@site/docs/core-messaging-limits.md",permalink:"/dev-portal/docs/core-messaging-limits",editUrl:"https://github.com/Zilliqa/dev-portal/docs/core-messaging-limits.md",sidebar:"someSidebar5",previous:{title:"Blacklist",permalink:"/dev-portal/docs/core-blacklist"},next:{title:"Message Dispatch and Processing",permalink:"/dev-portal/docs/core-message-dispatch"}},s=[{value:"Message Size",id:"message-size",children:[]},{value:"Message Count",id:"message-count",children:[]},{value:"Sending Frequency",id:"sending-frequency",children:[]},{value:"Active Connections",id:"active-connections",children:[]}],l={rightToc:s};function m(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The volume and size of peer-to-peer communication for a Zilliqa node is controlled by several factors at different parts of the stack."),Object(a.b)("h2",{id:"message-size"},"Message Size"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MIN_READ_WATERMARK_IN_BYTES"),": The minimum number of bytes read from the socket before we act on the data. It is basically the ",Object(a.b)("inlineCode",{parentName:"li"},"lowmark")," parameter required by the libevent function ",Object(a.b)("inlineCode",{parentName:"li"},"bufferevent_setwatermark"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MAX_READ_WATERMARK_IN_BYTES"),": The maximum number of bytes read from the socket before we stop accepting further input. It is basically the ",Object(a.b)("inlineCode",{parentName:"li"},"highmark")," parameter required by the libevent function ",Object(a.b)("inlineCode",{parentName:"li"},"bufferevent_setwatermark"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MAX_GOSSIP_MSG_SIZE_IN_BYTES"),": The maximum size of a socket message with start byte = ",Object(a.b)("inlineCode",{parentName:"li"},"START_BYTE_GOSSIP"),". If a message reaches this size, the sender is blacklisted.")),Object(a.b)("h2",{id:"message-count"},"Message Count"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MAXSENDMESSAGE"),": The number of active threads for the outgoing message pool."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MAXRECVMESSAGE"),": The number of active threads for the incoming message pool."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"SENDQUEUE_SIZE"),": The maximum size of the outgoing message queue (before transfer to the outgoing pool), beyond which any further messages are dropped."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MSGQUEUE_SIZE"),": The maximum size of the incoming message queue (before transfer to the incoming pool), beyond which any further messages are dropped.")),Object(a.b)("h2",{id:"sending-frequency"},"Sending Frequency"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MAXRETRYCONN"),": The maximum number of socket connection attempts to perform for sending messages to a peer."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"PUMPMESSAGE_MILLISECONDS"),": The maximum wait time (minimum being 1 ms) before re-attempting socket connection.")),Object(a.b)("h2",{id:"active-connections"},"Active Connections"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MAX_PEER_CONNECTION"),": The maximum number of active connections to a specific peer.")))}m.isMDXComponent=!0},237:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),m=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=m(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=m(n),p=r,d=b["".concat(o,".").concat(p)]||b[p]||u[p]||a;return n?i.a.createElement(d,c(c({ref:t},l),{},{components:n})):i.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);