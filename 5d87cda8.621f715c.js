(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{170:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var r=n(2),o=n(9),a=(n(0),n(237)),i={id:"core-multipliers",title:"Multipliers"},s={id:"core-multipliers",isDocsHomePage:!1,title:"Multipliers",description:"The Zilliqa network - specifically, the DS committee and shard nodes - maintain a list of lookup nodes. All blockchain data generated by the network are forwarded to these lookup nodes, in order for them to function as full nodes.",source:"@site/docs/core-multipliers.md",permalink:"/docs/core-multipliers",editUrl:"https://github.com/Zilliqa/dev-portal/docs/core-multipliers.md",sidebar:"someSidebar5",previous:{title:"Transaction Dispatch",permalink:"/docs/core-transaction-dispatch"},next:{title:"PoW Algorithm",permalink:"/docs/core-pow"}},l=[],c={rightToc:l};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The Zilliqa network - specifically, the DS committee and shard nodes - maintain a list of lookup nodes. All blockchain data generated by the network are forwarded to these lookup nodes, in order for them to function as ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"basics-zil-nodes#lookup-nodes"}),"full nodes"),"."),Object(a.b)("p",null,"On the other hand, the network has no direct knowledge of all existing ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"basics-zil-nodes#seed-nodes"}),"seed nodes"),". Seed nodes, which are also full nodes, need to receive the same data as the lookup nodes to remain synced with the network. Among these seed nodes are the ones maintained by Zilliqa Research to service the public API, as well as the ones hosted by exchanges and ecosystem partners."),Object(a.b)("p",null,"To address this communication gap, multipliers play the role of receiving blockchain data-related messages from the network and forwarding them to seed nodes. In addition to the aforementioned lookup nodes, the network also maintains a list of these multiplier nodes, hence blockchain data is also sent to them. The Zilliqa Mainnet runs with several multipliers, each one configured to forward messages to a list of seed nodes identified by their IP address and port. "),Object(a.b)("p",null,"The multiplier is a simple Go program that basically listens at a particular port for incoming messages and forwards the messages to the forwarding list. It periodically checks this list for any updates, enabling the addition or removal of seed nodes anytime. The multiplier uses hashes to prevent duplicate messsages from being forwarded repeatedly. It is robust enough to retry sending messages to recipients in the event of I/O timeout errors, which could happen due to network glitches on either end."))}d.isMDXComponent=!0},237:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),d=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||a;return n?o.a.createElement(f,s(s({ref:t},c),{},{components:n})):o.a.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);