(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{213:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(9),o=(n(0),n(237)),i={id:"exchange-tracking-deposits",title:"Polling for Deposits"},s={id:"exchange-tracking-deposits",isDocsHomePage:!1,title:"Polling for Deposits",description:"---",source:"@site/docs/exchange-tracking-deposits.md",permalink:"/docs/exchange-tracking-deposits",editUrl:"https://github.com/Zilliqa/dev-portal/docs/exchange-tracking-deposits.md",sidebar:"someSidebar4",previous:{title:"Sending Transactions",permalink:"/docs/exchange-sending-transactions"},next:{title:"Understanding Transaction Receipts",permalink:"/docs/exchange-transaction-receipts"}},c=[{value:"Setting Up",id:"setting-up",children:[]},{value:"Implementing the Handler Function",id:"implementing-the-handler-function",children:[]},{value:"Starting the Cron Job",id:"starting-the-cron-job",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("hr",null),Object(o.b)("p",null,"Apart from sending transactions, an exchange also needs a way to listen for\ntransactions sent to their addresses (deposits). We won't cover how this can\nbe done for ERC20-like smart contracts on Zilliqa in this tutorial, but the\nsame strategy can be applied."),Object(o.b)("p",null,"The code in this tutorial is derived from the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Zilliqa/dev-portal/blob/master/examples/exchange/src/cron/deposit.ts"}),"example application"),"."),Object(o.b)("h2",{id:"setting-up"},"Setting Up"),Object(o.b)("p",null,"To implement a simple and familiar polling mechanism in Node.js, we will use\na few additional dependencies:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"npm i node-cron p-map lodash\n")),Object(o.b)("h2",{id:"implementing-the-handler-function"},"Implementing the Handler Function"),Object(o.b)("p",null,"We will use a simple ",Object(o.b)("inlineCode",{parentName:"p"},"class")," called ",Object(o.b)("inlineCode",{parentName:"p"},"DepositCron")," to set up our cron job.\nWe'll start by implementing a handler method, aptly named ",Object(o.b)("inlineCode",{parentName:"p"},"handler"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import {flatten, range} from 'lodash';\nimport pMap from 'p-map';\nimport * as cron from 'node-cron';\nimport {ZilliqaService} from '../services/zilliqa';\n\nexport class DepositCron {\n  addresses: string[] = [];\n  frequency: string = '* * * * *';\n  svc: ZilliqaService;\n  task: cron.ScheduledTask;\n  // you should persist the last fetched block to a database, and initialise\n  // this cron job with that block number, to avoid fetch all blocks from 0 to\n  // present.\n  lastFetchedTxBlock: number = 0;\n\n  constructor(frequency: string, svc: ZilliqaService, addresses: string[]) {\n    this.frequency = frequency;\n    this.svc = svc;\n    this.addresses = addresses;\n  }\n\n  async handler() {\n    const currentTxBlock = await this.svc.getTxBlock();\n    console.log('Current tx block: ', currentTxBlock);\n    if (currentTxBlock > this.lastFetchedTxBlock) {\n      // get transactions from lastFetchedTxBlock + 1 to current, and set\n      // lastFetchedTxBlock to current\n      const transactions = await pMap(\n        range(this.lastFetchedTxBlock + 1, currentTxBlock),\n        blk => this.svc.getDeposits(this.addresses, blk),\n      ).then(flatten);\n\n      this.lastFetchedTxBlock = currentTxBlock;\n\n      // we are only logging to stdout, but in a real application, you would\n      // be writing the result to the database.\n      console.log(`Found ${transactions.length} deposits for ${this.addresses}`);\n    }\n  }\n}\n")),Object(o.b)("p",null,"Let's unpack ",Object(o.b)("inlineCode",{parentName:"p"},"handler"),". We are taking several steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Fetch the current ",Object(o.b)("inlineCode",{parentName:"li"},"TxBlock"),"."),Object(o.b)("li",{parentName:"ol"},"We compare the value of the current ",Object(o.b)("inlineCode",{parentName:"li"},"TxBlock")," against the one we have\nrecorded using ",Object(o.b)("inlineCode",{parentName:"li"},"lastFetchedTxBlock"),"."),Object(o.b)("li",{parentName:"ol"},"If there is a difference, we fetch all transactions that have been\nprocessed between ",Object(o.b)("inlineCode",{parentName:"li"},"lastFetchedTxBlock + 1")," and the current ",Object(o.b)("inlineCode",{parentName:"li"},"TxBlock"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"i.e., everyone transaction we have missed."))),Object(o.b)("li",{parentName:"ol"},"We then call ",Object(o.b)("inlineCode",{parentName:"li"},"svc.getDeposits")," for every transaction processed in that span\nof blocks. It compares the ",Object(o.b)("inlineCode",{parentName:"li"},"toAddr")," property of each transaction against\nthe ",Object(o.b)("inlineCode",{parentName:"li"},"addresses")," array we passed to the ",Object(o.b)("inlineCode",{parentName:"li"},"constructor"),", checking if it\ncontains our ",Object(o.b)("inlineCode",{parentName:"li"},"toAddr"),". If so, then a transaction to an address we are\ninterested in has occurred.")),Object(o.b)("h2",{id:"starting-the-cron-job"},"Starting the Cron Job"),Object(o.b)("p",null,"So far we have no way of starting up or controlling our ",Object(o.b)("inlineCode",{parentName:"p"},"CronJob"),". We'll do that by\nimplementing ",Object(o.b)("inlineCode",{parentName:"p"},"start"),", ",Object(o.b)("inlineCode",{parentName:"p"},"stop"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"nuke")," methods."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import {flatten, range} from 'lodash';\nimport pMap from 'p-map';\nimport * as cron from 'node-cron';\nimport {ZilliqaService} from '../services/zilliqa';\n\nexport class DepositCron {\n  addresses: string[] = [];\n  frequency: string = '* * * * *';\n  svc: ZilliqaService;\n  task: cron.ScheduledTask;\n  // you should persist the last fetched block to a database, and initialise\n  // this cron job with that block number, to avoid fetch all blocks from 0 to\n  // present.\n  lastFetchedTxBlock: number = 0;\n\n  constructor(frequency: string, svc: ZilliqaService, addresses: string[]) {\n    this.frequency = frequency;\n    this.svc = svc;\n    this.addresses = addresses;\n    this.task = cron.schedule(this.frequency, this.handler.bind(this));\n  }\n\n  async handler() {\n    const currentTxBlock = await this.svc.getTxBlock();\n    console.log('Current tx block: ', currentTxBlock);\n    if (currentTxBlock > this.lastFetchedTxBlock) {\n      // get transactions from lastFetchedTxBlock + 1 to current, and set\n      // lastFetchedTxBlock to current\n      const transactions = await pMap(\n        range(this.lastFetchedTxBlock + 1, currentTxBlock),\n        blk => this.svc.getDeposits(this.addresses, blk),\n      ).then(flatten);\n\n      this.lastFetchedTxBlock = currentTxBlock;\n\n      // we are only logging to stdout, but in a real application, you would\n      // be writing the result to the database.\n      console.log(`Found ${transactions.length} deposits for ${this.addresses}`);\n    }\n  }\n\n  async start() {\n    this.task.start();\n  }\n\n  async stop() {\n    this.task.stop();\n  }\n\n  async nuke() {\n    this.task.destroy();\n  }\n}\n")),Object(o.b)("p",null,"Now that we have our methods, we can use the cron job like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"// app.ts\n// initialise services\nimport * as services from './services';\nimport * as crons from './cron';\n\nconst zilliqaSvc = new services.ZilliqaService(\n  'https://stress-test-api.aws.z7a.xyz',\n  {\n    [config.get('mnemonic')]: 8,\n  },\n);\n\n// boot up cron jobs\n// these can also be destroyed\nconst depositCron = new crons.DepositCron('* * * * *', zilliqaSvc);\ndepositCron.start();\n")))}p.isMDXComponent=!0},237:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,h=d["".concat(i,".").concat(u)]||d[u]||b[u]||o;return n?a.a.createElement(h,s(s({ref:t},l),{},{components:n})):a.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);