(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{162:function(t,n,e){"use strict";e.r(n),e.d(n,"frontMatter",(function(){return c})),e.d(n,"metadata",(function(){return o})),e.d(n,"rightToc",(function(){return s})),e.d(n,"default",(function(){return p}));var a=e(2),r=e(9),i=(e(0),e(237)),c={id:"dev-txn-broadcasting",title:"Broadcasting"},o={id:"dev-txn-broadcasting",isDocsHomePage:!1,title:"Broadcasting",description:"After signing the transaction, we may broadcast the transaction to a seed node (e.g. https://dev-api.zilliqa.com) by creating a transaction object. The correct RPC API to use is CreateTransaction.",source:"@site/docs/dev-txn-broadcasting.md",permalink:"/docs/dev-txn-broadcasting",editUrl:"https://github.com/Zilliqa/dev-portal/docs/dev-txn-broadcasting.md",sidebar:"someSidebar2",previous:{title:"Signing",permalink:"/docs/dev-txn-signing"},next:{title:"Polling",permalink:"/docs/dev-txn-polling"}},s=[{value:"Non-Contract Transaction Object",id:"non-contract-transaction-object",children:[]},{value:"Contract Transaction Object",id:"contract-transaction-object",children:[]}],l={rightToc:s};function p(t){var n=t.components,e=Object(r.a)(t,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,e,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"After signing the transaction, we may broadcast the transaction to a seed node (e.g. ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://dev-api.zilliqa.com"}),"https://dev-api.zilliqa.com"),") by creating a transaction object. The correct RPC API to use is ",Object(i.b)("inlineCode",{parentName:"p"},"CreateTransaction"),".\nRefer to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://apidocs.zilliqa.com/#createtransaction"}),"https://apidocs.zilliqa.com/#createtransaction")," for more information."),Object(i.b)("p",null,"The seed node performs some basic validation of the JSON payload it receives, and will attempt to verify the signature. Please note that it does not verify the correctness of the ",Object(i.b)("inlineCode",{parentName:"p"},"nonce"),". It is at all times the developer's responsiblity to correctly increment the nonce used in the transaction."),Object(i.b)("p",null,"If ",Object(i.b)("inlineCode",{parentName:"p"},"nonce")," is incorrect, the transaction can silently fail. This means that the seed/lookup node will blindly forward the transaction to the correct shard, which may then reject the transaction with no error receipt."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," The above applies only if we use JSON RPC API to create the transaction object. If SDKs are used to create the transaction object, then ",Object(i.b)("inlineCode",{parentName:"p"},"nonce")," management is not an issue as SDKs would automatically handle the nonce management."),Object(i.b)("h2",{id:"non-contract-transaction-object"},"Non-Contract Transaction Object"),Object(i.b)("p",null,"Example of creating a ",Object(i.b)("strong",{parentName:"p"},"non-contract")," transaction object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const { BN, Long, bytes, units } = require('@zilliqa-js/util');\nconst { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst { getAddressFromPrivateKey } = require('@zilliqa-js/crypto');\nconst zilliqa = new Zilliqa(\"https://dev-api.zilliqa.com\");\n\nconst PRIVATE_KEY = '9afc1a1dab96127e902daaaec1a56c30346f007523c787c3bb62371c0e5a1be7';\n\nasync function main() {\n    try {\n        zilliqa.wallet.addByPrivateKey(PRIVATE_KEY);\n\n        let tx = zilliqa.transactions.new({\n            version: 65537,\n            toAddr: \"0x1234567890123456789012345678901234567890\",\n            amount: units.toQa(\"1000\", units.Units.Li),\n            gasLimit: Long.fromNumber(1),\n        });\n        tx = await zilliqa.blockchain.createTransaction(tx);\n        console.log(tx.id);\n    \n    } catch (err) {\n        console.log(err);\n    }\n\n}\n\nmain();\n\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n    "github.com/Zilliqa/gozilliqa-sdk/account"\n    provider2 "github.com/Zilliqa/gozilliqa-sdk/provider"\n    "github.com/Zilliqa/gozilliqa-sdk/transaction"\n    "github.com/Zilliqa/gozilliqa-sdk/util"\n    "strconv"\n)\n\nfunc main() {\n    \n    wallet := account.NewWallet()\n    wallet.AddByPrivateKey("e19d05c5452598e24caad4a0d85a49146f7be089515c905ae6a19e8a578a6930")\n    provider := provider2.NewProvider("https://dev-api.zilliqa.com/")\n\n    gasPrice, _ := provider.GetMinimumGasPrice()\n\n    tx := &transaction.Transaction{\n        Version:      strconv.FormatInt(int64(util.Pack(333, 1)), 10),\n        SenderPubKey: "0246E7178DC8253201101E18FD6F6EB9972451D121FC57AA2A06DD5C111E58DC6A",\n        ToAddr:       "4BAF5faDA8e5Db92C3d3242618c5B47133AE003C",\n        Amount:       "10000000",\n        GasPrice:     gasPrice,\n        GasLimit:     "1",\n        Code:         "",\n        Data:         "",\n        Priority:     false,\n    }\n\n    _ = wallet.Sign(tx, *provider)\n\n    rsp, _ := provider.CreateTransaction(tx.ToTransactionPayload())\n\n    resMap := rsp.Result.(map[string]interface{})\n    hash := resMap["TranID"].(string)\n    fmt.Printf("hash is %s\\n", hash)\n    tx.Confirm(hash, 1000, 3, provider)\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.firestack.example;\n\nimport com.firestack.laksaj.account.Wallet;\nimport com.firestack.laksaj.contract.Contract;\nimport com.firestack.laksaj.contract.ContractFactory;\nimport com.firestack.laksaj.contract.DeployParams;\nimport com.firestack.laksaj.contract.Value;\nimport com.firestack.laksaj.jsonrpc.HttpProvider;\nimport com.firestack.laksaj.transaction.Transaction;\nimport com.firestack.laksaj.transaction.TransactionFactory;\nimport javafx.util.Pair;\n\nimport java.io.IOException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static com.firestack.laksaj.account.Wallet.pack;\n\npublic class TransactionOperation {\n    public static void main(String[] args) throws IOException, NoSuchAlgorithmException {\n        Wallet wallet = new Wallet();\n        String ptivateKey = "e19d05c5452598e24caad4a0d85a49146f7be089515c905ae6a19e8a578a6930";\n        // Populate the wallet with an account\n        String address = wallet.addByPrivateKey(ptivateKey);\n        System.out.println("address is: " + address);\n\n        HttpProvider provider = new HttpProvider("https://api.zilliqa.com");\n        //get balance\n        HttpProvider.BalanceResult balanceResult = provider.getBalance(address);\n        System.out.println("balance is: " + balanceResult.getBalance());\n\n        //construct non-contract transaction\n        Transaction transaction = Transaction.builder()\n                .version(String.valueOf(pack(333, 1)))\n                .toAddr("zil16jrfrs8vfdtc74yzhyy83je4s4c5sqrcasjlc4")\n                .senderPubKey("0246e7178dc8253201101e18fd6f6eb9972451d121fc57aa2a06dd5c111e58dc6a")\n                .amount("10000000")\n                .gasPrice("1000000000")\n                .gasLimit("1")\n                .code("")\n                .data("")\n                .provider(new HttpProvider("https://api.zilliqa.com/"))\n                .build();\n\n        //sign transaction\n        transaction = wallet.sign(transaction);\n        System.out.println("signature is: " + transaction.getSignature());\n\n        //broadcast transaction\n        HttpProvider.CreateTxResult result = TransactionFactory.sendTransaction(transaction);\n    }\n}\n')),Object(i.b)("h2",{id:"contract-transaction-object"},"Contract Transaction Object"),Object(i.b)("p",null,"The following is an example of creating a ",Object(i.b)("strong",{parentName:"p"},"contract")," transaction object. The difference between ",Object(i.b)("strong",{parentName:"p"},"contract")," and ",Object(i.b)("strong",{parentName:"p"},"non-contract")," transaction objects is the additional contract transitions such as ",Object(i.b)("inlineCode",{parentName:"p"},"setHello")," and its relevant params such as the ",Object(i.b)("inlineCode",{parentName:"p"},"vname"),", ",Object(i.b)("inlineCode",{parentName:"p"},"type")," and ",Object(i.b)("inlineCode",{parentName:"p"},"value")," as describe in the deployed contract.\nThe other significant difference is the ",Object(i.b)("inlineCode",{parentName:"p"},"gasLimit")," field. For ",Object(i.b)("strong",{parentName:"p"},"contract")," transaction objects, the recommended ",Object(i.b)("inlineCode",{parentName:"p"},"gasLimit")," is between ",Object(i.b)("inlineCode",{parentName:"p"},"10000")," to ",Object(i.b)("inlineCode",{parentName:"p"},"30000"),"."),Object(i.b)("p",null,"Example of creating a ",Object(i.b)("strong",{parentName:"p"},"contract")," transaction object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const { BN, Long, bytes, units } = require('@zilliqa-js/util');\nconst { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst { toBech32Address, getAddressFromPrivateKey } = require('@zilliqa-js/crypto');\n\nconst zilliqa = new Zilliqa(\"https://dev-api.zilliqa.com\");\nconst chainId = 333; // chainId of the developer testnet\nconst msgVersion = 1; // current msgVersion\nconst VERSION = bytes.pack(chainId, msgVersion);\n\nconst PRIVATE_KEY = '9afc1a1dab96127e902daaaec1a56c30346f007523c787c3bb62371c0e5a1be7';\nconst CONTRACT_ADDR = toBech32Address('0x1234567890123456789012345678901234567890'); // convert to bech32 format\n\nasync function main() {\n    try {\n        zilliqa.wallet.addByPrivateKey(PRIVATE_KEY);\n        const deployedContract = zilliqa.contracts.at(CONTRACT_ADDR);\n        const callTx = await deployedContract.call(\n            'setHello',\n            [\n                {\n                    vname: 'msg',\n                    type: 'String',\n                    value: \"hello world!\"\n                }\n            ],\n            {\n                version: VERSION,\n                amount: new BN(0),\n                gasPrice: units.toQa(\"1000\", units.Units.Li)\n                gasLimit: Long.fromNumber(10000)\n            }\n        );\n\n        console.log(\"transaction: %o\", callTx.id);\n        console.log(JSON.stringify(callTx.receipt, null, 4));\n    \n    } catch (err) {\n        console.log(err);\n    }\n\n}\n\nmain();\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "github.com/Zilliqa/gozilliqa-sdk/account"\n    contract2 "github.com/Zilliqa/gozilliqa-sdk/contract"\n    "github.com/Zilliqa/gozilliqa-sdk/core"\n    "github.com/Zilliqa/gozilliqa-sdk/keytools"\n    provider2 "github.com/Zilliqa/gozilliqa-sdk/provider"\n    "github.com/Zilliqa/gozilliqa-sdk/util"\n    "strconv"\n)\n\nfunc main() {\n    host := "https://dev-api.zilliqa.com/"\n    privateKey := "e19d05c5452598e24caad4a0d85a49146f7be089515c905ae6a19e8a578a6930"\n    chainID := 333\n    msgVersion := 1\n\n    publickKey := keytools.GetPublicKeyFromPrivateKey(util.DecodeHex(privateKey), true)\n    address := keytools.GetAddressFromPublic(publickKey)\n    pubkey := util.EncodeHex(publickKey)\n    provider := provider2.NewProvider(host)\n\n    wallet := account.NewWallet()\n    wallet.AddByPrivateKey(privateKey)\n\n    contract := contract2.Contract{\n        Address:  "bd7198209529dC42320db4bC8508880BcD22a9f2",\n        Signer:   wallet,\n        Provider: provider,\n    }\n\n    args := []core.ContractValue{\n        {\n            "msg",\n            "String",\n            "hello world",\n        },\n    }\n\n    balAndNonce, _ := provider.GetBalance(address)\n    n := balAndNonce.Nonce + 1\n    gasPrice, _ := provider.GetMinimumGasPrice()\n\n    params := contract2.CallParams{\n        Nonce:        strconv.FormatInt(n, 10),\n        Version:      strconv.FormatInt(int64(util.Pack(chainID, msgVersion)), 10),\n        GasPrice:     gasPrice,\n        GasLimit:     "10000",\n        SenderPubKey: pubkey,\n        Amount:       "0",\n    }\n\n    tx, _ := contract.Call("setHello", args, params, true)\n    tx.Confirm(tx.ID, 1000, 3, provider)\n\n}\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.firestack.example;\n\nimport com.firestack.laksaj.account.Wallet;\nimport com.firestack.laksaj.contract.Contract;\nimport com.firestack.laksaj.contract.ContractFactory;\nimport com.firestack.laksaj.contract.DeployParams;\nimport com.firestack.laksaj.contract.Value;\nimport com.firestack.laksaj.jsonrpc.HttpProvider;\nimport com.firestack.laksaj.transaction.Transaction;\nimport com.firestack.laksaj.transaction.TransactionFactory;\nimport javafx.util.Pair;\n\nimport java.io.IOException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static com.firestack.laksaj.account.Wallet.pack;\n\npublic class TransactionOperation {\n    public static void main(String[] args) throws IOException, NoSuchAlgorithmException {\n        List<Value> init = Arrays.asList();\n        Wallet wallet = new Wallet();\n        String ptivateKey = "e19d05c5452598e24caad4a0d85a49146f7be089515c905ae6a19e8a578a6930";\n        ContractFactory factory = ContractFactory.builder().provider(new HttpProvider("https://dev-api.zilliqa.com/")).signer(wallet).build();\n        Contract contract = factory.atContract("zil1h4cesgy498wyyvsdkj7g2zygp0xj920jw2hyx0", "", (Value[]) init.toArray(), "");\n        Integer nonce = Integer.valueOf(factory.getProvider().getBalance("9bfec715a6bd658fcb62b0f8cc9bfa2ade71434a").getResult().getNonce());\n        CallParams params = CallParams.builder().nonce(String.valueOf(nonce + 1)).version(String.valueOf(pack(333, 1))).gasPrice("1000000000").gasLimit("10000").senderPubKey("0246e7178dc8253201101e18fd6f6eb9972451d121fc57aa2a06dd5c111e58dc6a").amount("0").build();\n        List<Value> values = Arrays.asList(Value.builder().vname("msg").type("String").value("hello world").build());\n        contract.call("setHello", (Value[]) values.toArray(), params, 3000, 3);\n    }\n}\n')))}p.isMDXComponent=!0},237:function(t,n,e){"use strict";e.d(n,"a",(function(){return d})),e.d(n,"b",(function(){return u}));var a=e(0),r=e.n(a);function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function c(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function o(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?c(Object(e),!0).forEach((function(n){i(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):c(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,a,r=function(t,n){if(null==t)return{};var e,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)e=i[a],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)e=i[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var l=r.a.createContext({}),p=function(t){var n=r.a.useContext(l),e=n;return t&&(e="function"==typeof t?t(n):o(o({},n),t)),e},d=function(t){var n=p(t.components);return r.a.createElement(l.Provider,{value:n},t.children)},m={inlineCode:"code",wrapper:function(t){var n=t.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(t,n){var e=t.components,a=t.mdxType,i=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),d=p(e),b=a,u=d["".concat(c,".").concat(b)]||d[b]||m[b]||i;return e?r.a.createElement(u,o(o({ref:n},l),{},{components:e})):r.a.createElement(u,o({ref:n},l))}));function u(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var i=e.length,c=new Array(i);c[0]=b;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=t,o.mdxType="string"==typeof t?t:a,c[1]=o;for(var l=2;l<i;l++)c[l]=e[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,e)}b.displayName="MDXCreateElement"}}]);