(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{232:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var o=n(2),r=n(9),i=(n(0),n(237)),a={id:"core-ds-mimo",title:"DS MIMO"},c={id:"core-ds-mimo",isDocsHomePage:!1,title:"DS MIMO",description:"Note: DS committee ejection has now been superseded by DS Reputation.",source:"@site/docs/core-ds-mimo.md",permalink:"/dev-portal/docs/core-ds-mimo",editUrl:"https://github.com/Zilliqa/dev-portal/docs/core-ds-mimo.md",sidebar:"someSidebar5",previous:{title:"Incremental DB",permalink:"/dev-portal/docs/core-incremental-db"},next:{title:"DS Reputation",permalink:"/dev-portal/docs/core-ds-reputation"}},l=[],m={rightToc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: DS committee ejection has now been superseded by ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/dev-portal/docs/core-ds-reputation"}),"DS Reputation"),".")),Object(i.b)("p",null,"DS committee membership is maintained using a multiple-in multiple-out (MIMO) setup. This setup allows ",Object(i.b)("inlineCode",{parentName:"p"},"n")," nodes to join and leave the DS committee at every DS epoch. The steps are:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Nodes submit PoWs (for difficulty and DS difficulty)"),Object(i.b)("li",{parentName:"ol"},"DS leader composes DS Block",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"DS leader determines how many nodes to elect into DS committee by using ",Object(i.b)("inlineCode",{parentName:"li"},"min(number of eligible pow submission, NUM_DS_ELECTION)")),Object(i.b)("li",{parentName:"ul"},"Hence, number of incoming DS nodes ranges from 0 to ",Object(i.b)("inlineCode",{parentName:"li"},"NUM_DS_ELECTION")))),Object(i.b)("li",{parentName:"ol"},"DS leader adds incoming DS members' information to the map inside DS Block"),Object(i.b)("li",{parentName:"ol"},"DS leader removes incoming DS members from ",Object(i.b)("inlineCode",{parentName:"li"},"sortedPoWSolns")," to ensure the incoming DS members do not get added into any of the shards"),Object(i.b)("li",{parentName:"ol"},"After composing DS Block, ",Object(i.b)("inlineCode",{parentName:"li"},"ComputeDSBlockParameters()")," returns the number of incoming DS members (to be used a later step)"),Object(i.b)("li",{parentName:"ol"},"Now, it is time to eject ",Object(i.b)("inlineCode",{parentName:"li"},"n")," number of (oldest) DS members from the DS committee and downgrade these to shard members"),Object(i.b)("li",{parentName:"ol"},"DS leader adds the ejected members into ",Object(i.b)("inlineCode",{parentName:"li"},"m_allPoWConns")," and ",Object(i.b)("inlineCode",{parentName:"li"},"sortedPoWSolns"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"As downgraded members do not perform PoWs, dummy PoW solutions are given to these"),Object(i.b)("li",{parentName:"ul"},"Dummy PoW solution in this case is calculated using ",Object(i.b)("inlineCode",{parentName:"li"},"sha256(node\u2019s pubkey)")))),Object(i.b)("li",{parentName:"ol"},"Now, it is time to compose the sharding structure. There is no major change to this portion"),Object(i.b)("li",{parentName:"ol"},"DS Block consensus begins and is successfully completed"),Object(i.b)("li",{parentName:"ol"},"DS leader and backups do the following",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"DS leader and backups run ",Object(i.b)("inlineCode",{parentName:"li"},"UpdateDSCommitteeComposition()")," first before doing ",Object(i.b)("inlineCode",{parentName:"li"},"UpdateMyDSModeAndConsensusId()"),". This is to be consistent with what the incoming members will do. Also, having such changes enable much easier calculation of ",Object(i.b)("inlineCode",{parentName:"li"},"consensusMyID")),Object(i.b)("li",{parentName:"ul"},"Add ",Object(i.b)("inlineCode",{parentName:"li"},"n")," number of incoming DS members inside the DS committee data structure in ",Object(i.b)("inlineCode",{parentName:"li"},"mediator")),Object(i.b)("li",{parentName:"ul"},"Pop ",Object(i.b)("inlineCode",{parentName:"li"},"n")," number of DS members from the DS committee data structure in ",Object(i.b)("inlineCode",{parentName:"li"},"mediator")),Object(i.b)("li",{parentName:"ul"},"The oldest ",Object(i.b)("inlineCode",{parentName:"li"},"n")," members are decided by ",Object(i.b)("inlineCode",{parentName:"li"},"(consensusID + n incoming DS members) >= size of DS committee"),". These nodes change their mode to ",Object(i.b)("inlineCode",{parentName:"li"},"IDLE")),Object(i.b)("li",{parentName:"ul"},"Other DS members increment their ",Object(i.b)("inlineCode",{parentName:"li"},"consensusMyID")," by ",Object(i.b)("inlineCode",{parentName:"li"},"n")," and update the status to either DS leader or backup"))),Object(i.b)("li",{parentName:"ol"},"DS committee sends the DS Block and sharding structure to all PoW submitters"),Object(i.b)("li",{parentName:"ol"},"Incoming DS members receive the DS Block, process it, and update their DS ",Object(i.b)("inlineCode",{parentName:"li"},"consensusMyID")," based on the ordering found in the map in the DS Block. From here onwards, these nodes are part of the DS committee"),Object(i.b)("li",{parentName:"ol"},"Shard members process the DS Block and update their view of the DS committee")))}s.isMDXComponent=!0},237:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=r.a.createContext({}),s=function(e){var t=r.a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(m.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),b=s(n),p=o,u=b["".concat(a,".").concat(p)]||b[p]||d[p]||i;return n?r.a.createElement(u,c(c({ref:t},m),{},{components:n})):r.a.createElement(u,c({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var m=2;m<i;m++)a[m]=n[m];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);